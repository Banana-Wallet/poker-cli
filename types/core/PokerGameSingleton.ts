/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IPokerGameSingleton {
  export type PokerRoundStruct = {
    currentTurn: BigNumberish;
    highestChips: BigNumberish;
    chips: BigNumberish[];
    gamePlayers: AddressLike[];
  };

  export type PokerRoundStructOutput = [
    currentTurn: bigint,
    highestChips: bigint,
    chips: bigint[],
    gamePlayers: string[]
  ] & {
    currentTurn: bigint;
    highestChips: bigint;
    chips: bigint[];
    gamePlayers: string[];
  };

  export type PokerTableStruct = {
    currentRound: BigNumberish;
    buyInAmount: BigNumberish;
    maxPlayers: BigNumberish;
    players: AddressLike[];
    potValue: BigNumberish;
    bigBlind: BigNumberish;
    smallBlind: BigNumberish;
    playerChips: BigNumberish[];
    gameEnded: boolean;
    finalPoints: BigNumberish[];
  };

  export type PokerTableStructOutput = [
    currentRound: bigint,
    buyInAmount: bigint,
    maxPlayers: bigint,
    players: string[],
    potValue: bigint,
    bigBlind: bigint,
    smallBlind: bigint,
    playerChips: bigint[],
    gameEnded: boolean,
    finalPoints: bigint[]
  ] & {
    currentRound: bigint;
    buyInAmount: bigint;
    maxPlayers: bigint;
    players: string[];
    potValue: bigint;
    bigBlind: bigint;
    smallBlind: bigint;
    playerChips: bigint[];
    gameEnded: boolean;
    finalPoints: bigint[];
  };
}

export interface PokerGameSingletonInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "chips"
      | "deck"
      | "hiddenCards"
      | "initialize"
      | "playHand"
      | "playerCards"
      | "players"
      | "pokerRoundStatus"
      | "pokerRounds"
      | "pokerTable"
      | "pokerTableStatus"
      | "remainingCards"
      | "resetGame"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "chips", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "deck", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "hiddenCards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "playHand",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "playerCards",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pokerRoundStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pokerRounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pokerTable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pokerTableStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remainingCards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "resetGame", values?: undefined): string;

  decodeFunctionResult(functionFragment: "chips", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deck", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hiddenCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "playHand", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pokerRoundStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pokerRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pokerTable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pokerTableStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remainingCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resetGame", data: BytesLike): Result;
}

export interface PokerGameSingleton extends BaseContract {
  connect(runner?: ContractRunner | null): PokerGameSingleton;
  waitForDeployment(): Promise<this>;

  interface: PokerGameSingletonInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  chips: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  deck: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { number: bigint; cardType: bigint }],
    "view"
  >;

  hiddenCards: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { number: bigint; cardType: bigint }],
    "view"
  >;

  initialize: TypedContractMethod<
    [_players: AddressLike[]],
    [void],
    "nonpayable"
  >;

  playHand: TypedContractMethod<
    [_action: BigNumberish, _raiseAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  playerCards: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, bigint] & { number: bigint; cardType: bigint }],
    "view"
  >;

  players: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  pokerRoundStatus: TypedContractMethod<
    [_round: BigNumberish],
    [IPokerGameSingleton.PokerRoundStructOutput],
    "view"
  >;

  pokerRounds: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { currentTurn: bigint; highestChips: bigint }],
    "view"
  >;

  pokerTable: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        currentRound: bigint;
        buyInAmount: bigint;
        maxPlayers: bigint;
        potValue: bigint;
        bigBlind: bigint;
        smallBlind: bigint;
        gameEnded: boolean;
      }
    ],
    "view"
  >;

  pokerTableStatus: TypedContractMethod<
    [],
    [IPokerGameSingleton.PokerTableStructOutput],
    "view"
  >;

  remainingCards: TypedContractMethod<[], [bigint], "view">;

  resetGame: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "chips"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "deck"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { number: bigint; cardType: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "hiddenCards"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { number: bigint; cardType: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_players: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "playHand"
  ): TypedContractMethod<
    [_action: BigNumberish, _raiseAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "playerCards"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, bigint] & { number: bigint; cardType: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "pokerRoundStatus"
  ): TypedContractMethod<
    [_round: BigNumberish],
    [IPokerGameSingleton.PokerRoundStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "pokerRounds"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { currentTurn: bigint; highestChips: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "pokerTable"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        currentRound: bigint;
        buyInAmount: bigint;
        maxPlayers: bigint;
        potValue: bigint;
        bigBlind: bigint;
        smallBlind: bigint;
        gameEnded: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "pokerTableStatus"
  ): TypedContractMethod<
    [],
    [IPokerGameSingleton.PokerTableStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "remainingCards"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "resetGame"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
